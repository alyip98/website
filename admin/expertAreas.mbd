<frontmatter>
title: "Expert Areas Related to Internal Projects"
header: topnav.md
footer: footer.mbdf
head: head.mbdf
</frontmatter>

# Expert Areas Related to Internal Projects ==[to be updated]==

Given below are some areas that have overlaps with internal projects that you'll be working in CS3281. Picking these will have the advantage that your work in the internal projects can increase your expertise in the chosen areas (i.e. your work in CS3281 can help you earn more credit in CS3282).

## Languages

Here are the main languages used in the three projects (`MB`: MarkBind, `PL`: PowerPointLabs, `RS`: RepoSense, `SE`: SE-EDU, `TM`: TEAMMATES).

Language   | Projects
-----------|-----
Java       | `RS` `SE` `TM`
HTML       | `MB` `RS` `TM`
CSS        | `MB` `RS` `TM`
JavaScript | `MB` `RS`
TypeScript | `TM`
C#         | `PL`


## Tools, Tech Topics

The aspects, tools, topics given below can help you to pick an aspect and a topic to study.

### Code Quality

* Static analysis 
  * Checkstyle: `TM` `RS` `SE`
  * Codacy: `SE`
  * TSLint: `TM`
  * SpotBugs: `TM` `SE`
  * PMD: `TM` `SE`
  * Stylelint: `TM`
  * StyleCop: `PL`

### Dev Ops

* Build 
  * Gradle: `TM` `RS` `SE`
  * MSBuild: `PL`
  * Netlify: `MB` `RS`
  * npm: `MB` `TM`

* CI
  * AppVeyor: `TM` `SE` `PL`
  * Travis: `TM` `RS` `SE`

* Process 
  * Workflow: all projects
  * Dev community management: all projects
  * Release management: all projects


### Desktop

* GUI
  * JavaFx, ControlsFx: `SE`
  * Windows Presentation Foundation (WPF), Winform: `PL`

* Installers: `SE` `PL`

* Portability: `SE` (ensuring the apps can run an all major OS'es)

### Documentation

Generating and maintaining user/developer docs require good writing skills as well and various tools.

* UML: all projects
* Document generation
  * Jekyll: `MB` `PL`
  * AsciiDoc: `MB` `SE`
  * Markdown, nunjucks: `MB` `RS` `TM`

### Fault Tolerance

This is especially important to `TM` because Web apps are vulnerable to all sorts of intermittent faults. For example, one problem it faces is called 'eventual consistency' where new data requires some time to propagate through all nodes of the distributed database during which time the app has to deal with data in an inconsistent state.

* Logging: all projects
* Error reporting: all projects
* Backup and restore: `TM`

### Performance and Scalability

This affects all projects:

* `MB`: Build and live preview features need to be fast.
* `PL`: Users don't like their PowerPoint to slow down due to our plugin.
* `RS`: Report generation needs to be fast. Memory consumption should be minimized.
* `SE`: We want the app to be very fast.
* `TM`: 1. It has to deal with spikes in load. 2. Every CPU cycle or byte of data transfer costs us money.

Sub areas: 

* Multi-threading: `TM` `SE`
* Profiling (to find performance bottlenecks): all projects
* Scalability testing: all projects

### Security

* Vulnerabilities: `TM`
* Access control: `TM`

### Testing

* Code coverage 
  * Istanbul: `TM`
  * Coveralls: `SE`
  * Codecov: `TM`
  * JaCoCo: `TM` `SE`
  * MSTest code coverage: `PL`

* Testing frameworks
  * JUnit: `RS` `SE`
  * MS Test: `PL`
  * TestNG: `TM`
  * Karma/Jasmine: `TM`

* UI testing
  * MS Test: `PL`
  * Selenium: `TM`
  * TestFx: `SE`
  
* Mocking
  * Mockito, PowerMock: `SE`
  * Moq: `PL`

### UIX

* Usability: all projects
* Accessibility: all projects -- e.g. some users may have accessibility needs
* Responsiveness: `MB` `RS` `TM`

### Web (Frontend)

* Front End frameworks: 
  * Bootstrap: `TM`
  * Vuestrap: `MB`
  * Angular: `TM`

### Web (Backend)

* Google App Engine: `TM`
* Servlets: `TM`
* Node.js: `MB`
* Persistence
  * Google Cloud Datastore: `TM`
  
<box>

{{ icon_info }} Information in this page can get outdated as the projects evolve. PRs to update this page are welcome.

</box>
